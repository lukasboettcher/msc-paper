@article{juliani2018unity,
  title   = {Unity: A general platform for intelligent agents},
  author  = {Juliani, Arthur and Berges, Vincent-Pierre and Vckay, Esh and Gao, Yuan and Henry, Hunter and Mattar, Marwan and Lange, Danny},
  journal = {arXiv preprint arXiv:1809.02627},
  year    = {2018}
}

% survey state of the union
@inproceedings{hind2001pointer,
  title     = {Pointer analysis: Haven't we solved this problem yet?},
  author    = {Hind, Michael},
  booktitle = {Proceedings of the 2001 ACM SIGPLAN-SIGSOFT workshop on Program analysis for software tools and engineering},
  pages     = {54--61},
  year      = {2001}
}
@inproceedings{toman2017taming,
  title        = {Taming the static analysis beast},
  author       = {Toman, John and Grossman, Dan},
  booktitle    = {2nd Summit on Advances in Programming Languages (SNAPL 2017)},
  year         = {2017},
  organization = {Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik}
}
@article{smaragdakis2015pointer,
  title     = {Pointer analysis},
  author    = {Smaragdakis, Yannis and Balatsouras, George and others},
  journal   = {Foundations and Trends{\textregistered} in Programming Languages},
  volume    = {2},
  number    = {1},
  pages     = {1--69},
  year      = {2015},
  publisher = {Now Publishers, Inc.}
}
@article{landi1992undecidability,
  title     = {Undecidability of static analysis},
  author    = {Landi, William},
  journal   = {ACM Letters on Programming Languages and Systems (LOPLAS)},
  volume    = {1},
  number    = {4},
  pages     = {323--337},
  year      = {1992},
  publisher = {ACM New York, NY, USA}
}
@article{kulkarni2016accelerating,
  title     = {Accelerating program analyses by cross-program training},
  author    = {Kulkarni, Sulekha and Mangal, Ravi and Zhang, Xin and Naik, Mayur},
  journal   = {ACM SIGPLAN Notices},
  volume    = {51},
  number    = {10},
  pages     = {359--377},
  year      = {2016},
  publisher = {ACM New York, NY, USA}
}

@article{livshits2015defense,
  title={In defense of soundiness: A manifesto},
  author={Livshits, Benjamin and Sridharan, Manu and Smaragdakis, Yannis and Lhot{\'a}k, Ond{\v{r}}ej and Amaral, J Nelson and Chang, Bor-Yuh Evan and Guyer, Samuel Z and Khedker, Uday P and M{\o}ller, Anders and Vardoulakis, Dimitrios},
  journal={Communications of the ACM},
  volume={58},
  number={2},
  pages={44--46},
  year={2015},
  publisher={ACM New York, NY, USA}
}


% heap survey
@article{kanvar2016heap,
  title     = {Heap abstractions for static analysis},
  author    = {Kanvar, Vini and Khedker, Uday P},
  journal   = {ACM Computing Surveys (CSUR)},
  volume    = {49},
  number    = {2},
  pages     = {1--47},
  year      = {2016},
  publisher = {ACM New York, NY, USA}
}
% incremental caching for library code
@inproceedings{mcpeak2013scalable,
  title     = {Scalable and incremental software bug detection},
  author    = {McPeak, Scott and Gros, Charles-Henri and Ramanathan, Murali Krishna},
  booktitle = {Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering},
  pages     = {554--564},
  year      = {2013}
}

@inproceedings{smaragdakis2014introspective,
  title={Introspective analysis: context-sensitivity, across the board},
  author={Smaragdakis, Yannis and Kastrinis, George and Balatsouras, George},
  booktitle={Proceedings of the 35th ACM SIGPLAN Conference on Programming Language Design and Implementation},
  pages={485--495},
  year={2014}
}


@inproceedings{balatsouras2016structure,
  title        = {Structure-sensitive points-to analysis for C and C++},
  author       = {Balatsouras, George and Smaragdakis, Yannis},
  booktitle    = {International Static Analysis Symposium},
  pages        = {84--104},
  year         = {2016},
  organization = {Springer}
}


% compelxity of parallel andersen analysis
@article{mathiasen2021fine,
  title     = {The fine-grained and parallel complexity of Andersenâ€™s pointer analysis},
  author    = {Mathiasen, Anders Alnor and Pavlogiannis, Andreas},
  journal   = {Proceedings of the ACM on Programming Languages},
  volume    = {5},
  number    = {POPL},
  pages     = {1--29},
  year      = {2021},
  publisher = {ACM New York, NY, USA}
}
@phdthesis{andersen1994program,
  title  = {Program analysis and specialization for the C programming language},
  author = {Andersen, Lars Ole},
  year   = {1994},
  school = {Citeseer}
}
@inproceedings{steensgaard1996points,
  title={Points-to analysis in almost linear time},
  author={Steensgaard, Bjarne},
  booktitle={Proceedings of the 23rd ACM SIGPLAN-SIGACT symposium on Principles of programming languages},
  pages={32--41},
  year={1996}
}


% thesis for llvm steens impl
@book{lin2015alias,
  title     = {Alias analysis in LLVM},
  author    = {Lin, Sheng-Hsiu},
  year      = {2015},
  publisher = {Lehigh University}
}

% context free languages, matmul ideas
% idea that reachability can be used for set constraint problems
@article{reps1998program,
  title     = {Program analysis via graph reachability},
  author    = {Reps, Thomas},
  journal   = {Information and software technology},
  volume    = {40},
  number    = {11-12},
  pages     = {701--726},
  year      = {1998},
  publisher = {Elsevier}
}
% cited in ^
@inproceedings{shapiro1997fast,
  title={Fast and accurate flow-insensitive points-to analysis},
  author={Shapiro, Marc and Horwitz, Susan},
  booktitle={Proceedings of the 24th ACM SIGPLAN-SIGACT symposium on Principles of programming languages},
  pages={1--14},
  year={1997}
}


@inproceedings{azimov2018context,
  title     = {Context-free path querying by matrix multiplication},
  author    = {Azimov, Rustam and Grigorev, Semyon},
  booktitle = {Proceedings of the 1st ACM SIGMOD Joint International Workshop on Graph Data Management Experiences \& Systems (GRADES) and Network Data Analytics (NDA)},
  pages     = {1--10},
  year      = {2018}
}
@inproceedings{orachev2020context,
  title        = {Context-free path querying by kronecker product},
  author       = {Orachev, Egor and Epelbaum, Ilya and Azimov, Rustam and Grigorev, Semyon},
  booktitle    = {European Conference on Advances in Databases and Information Systems},
  pages        = {49--59},
  year         = {2020},
  organization = {Springer}
}
@article{shemetova2021one,
  title   = {One Algorithm to Evaluate Them All: Unified Linear Algebra Based Approach to Evaluate Both Regular and Context-Free Path Queries},
  author  = {Shemetova, Ekaterina and Azimov, Rustam and Orachev, Egor and Epelbaum, Ilya and Grigorev, Semyon},
  journal = {arXiv preprint arXiv:2103.14688},
  year    = {2021}
}
@inproceedings{mishin2019evaluation,
  title     = {Evaluation of the context-free path querying algorithm based on matrix multiplication},
  author    = {Mishin, Nikita and Sokolov, Iaroslav and Spirin, Egor and Kutuev, Vladimir and Nemchinov, Egor and Gorbatyuk, Sergey and Grigorev, Semyon},
  booktitle = {Proceedings of the 2nd Joint International Workshop on Graph Data Management Experiences \& Systems (GRADES) and Network Data Analytics (NDA)},
  pages     = {1--5},
  year      = {2019}
}
@inproceedings{orachev2021spbla,
  title        = {SPbLA: The Library of GPGPU-Powered Sparse Boolean Linear Algebra Operations},
  author       = {Orachev, Egor and Karpenko, Maria and Khoroshev, Artem and Grigorev, Semyon},
  booktitle    = {2021 IEEE International Parallel and Distributed Processing Symposium Workshops (IPDPSW)},
  pages        = {272--275},
  year         = {2021},
  organization = {IEEE}
}
@inproceedings{su2014parallel,
  title        = {Parallel pointer analysis with CFL-reachability},
  author       = {Su, Yu and Ye, Ding and Xue, Jingling},
  booktitle    = {2014 43rd International Conference on Parallel Processing},
  pages        = {451--460},
  year         = {2014},
  organization = {IEEE}
}
% svf
@inproceedings{sui2016svf,
  title        = {SVF: interprocedural static value-flow analysis in LLVM},
  author       = {Sui, Yulei and Xue, Jingling},
  booktitle    = {Proceedings of the 25th international conference on compiler construction},
  pages        = {265--266},
  year         = {2016},
  organization = {ACM}
}
@article{sui2014detecting,
  title     = {Detecting memory leaks statically with full-sparse value-flow analysis},
  author    = {Sui, Yulei and Ye, Ding and Xue, Jingling},
  journal   = {IEEE Transactions on Software Engineering},
  volume    = {40},
  number    = {2},
  pages     = {107--122},
  year      = {2014},
  publisher = {IEEE}
}
@inproceedings{shi2018pinpoint,
  title     = {Pinpoint: Fast and precise sparse value flow analysis for million lines of code},
  author    = {Shi, Qingkai and Xiao, Xiao and Wu, Rongxin and Zhou, Jinguo and Fan, Gang and Zhang, Charles},
  booktitle = {Proceedings of the 39th ACM SIGPLAN Conference on Programming Language Design and Implementation},
  pages     = {693--706},
  year      = {2018}
}
@article{sui2018value,
  title     = {Value-flow-based demand-driven pointer analysis for C and C++},
  author    = {Sui, Yulei and Xue, Jingling},
  journal   = {IEEE Transactions on Software Engineering},
  volume    = {46},
  number    = {8},
  pages     = {812--835},
  year      = {2018},
  publisher = {IEEE}
}
@inproceedings{lei2022taming,
  title={Taming Transitive Redundancy for Context-Free Language Reachability},
  author={LEI, YUXIANG and SUI, YULEI and DING, SHUO and ZHANG, QIRUN},
  booktitle={ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages (in proceeding) OOPSLA},
  volume={22},
  year={2022}
}



% graspan
@inproceedings{zheng2008demand,
  title     = {Demand-driven alias analysis for C},
  author    = {Zheng, Xin and Rugina, Radu},
  booktitle = {Proceedings of the 35th annual ACM SIGPLAN-SIGACT symposium on Principles of programming languages},
  pages     = {197--208},
  year      = {2008}
}

@article{wang2017graspan,
  title     = {Graspan: A single-machine disk-based graph system for interprocedural static analyses of large-scale systems code},
  author    = {Wang, Kai and Hussain, Aftab and Zuo, Zhiqiang and Xu, Guoqing and Amiri Sani, Ardalan},
  journal   = {ACM SIGARCH Computer Architecture News},
  volume    = {45},
  number    = {1},
  pages     = {389--404},
  year      = {2017},
  publisher = {ACM New York, NY, USA}
}
@article{zuo2021systemizing,
  title     = {Systemizing Interprocedural Static Analysis of Large-scale Systems Code with Graspan},
  author    = {Zuo, Zhiqiang and Wang, Kai and Hussain, Aftab and Sani, Ardalan Amiri and Zhang, Yiyu and Lu, Shenming and Dou, Wensheng and Wang, Linzhang and Li, Xuandong and Wang, Chenxi and others},
  journal   = {ACM Transactions on Computer Systems (TOCS)},
  volume    = {38},
  number    = {1-2},
  pages     = {1--39},
  year      = {2021},
  publisher = {ACM New York, NY, USA}
}
@article{gu2020towards,
  title     = {Towards efficient large-scale interprocedural program static analysis on distributed data-parallel computation},
  author    = {Gu, Rong and Zuo, Zhiqiang and Jiang, Xi and Yin, Han and Wang, Zhaokang and Wang, Linzhang and Li, Xuandong and Huang, Yihua},
  journal   = {IEEE Transactions on Parallel and Distributed Systems},
  volume    = {32},
  number    = {4},
  pages     = {867--883},
  year      = {2020},
  publisher = {IEEE}
}
% medez lojo et al
@article{mendez2012gpu,
  title     = {A GPU implementation of inclusion-based points-to analysis},
  author    = {Mendez-Lojo, Mario and Burtscher, Martin and Pingali, Keshav},
  journal   = {ACM SIGPLAN Notices},
  volume    = {47},
  number    = {8},
  pages     = {107--116},
  year      = {2012},
  publisher = {ACM New York, NY, USA}
}
% medez lojo et al cpu version
@inproceedings{mendez2010parallel,
  title     = {Parallel inclusion-based points-to analysis},
  author    = {M{\'e}ndez-Lojo, Mario and Mathew, Augustine and Pingali, Keshav},
  booktitle = {Proceedings of the ACM international conference on Object oriented programming systems languages and applications},
  pages     = {428--443},
  year      = {2010}
}

% wave
@inproceedings{waveprop,
  author    = {Pereira, Fernando Magno Quintao and Berlin, Daniel},
  title     = {Wave Propagation and Deep Propagation for Pointer Analysis},
  year      = {2009},
  isbn      = {9780769535760},
  publisher = {IEEE Computer Society},
  address   = {USA},
  url       = {https://doi.org/10.1109/CGO.2009.9},
  doi       = {10.1109/CGO.2009.9},
  abstract  = {This paper describes two new algorithms for solving inclusion based points-to analysis. The first algorithm, the Wave Propagation Method, is a modified version of an early technique presented by Pearce et al; however, it greatly improves on the running time of its predecessor. The second algorithm, the Deep Propagation Method, is a more light-weighted analysis, that requires less memory. We have compared these algorithms with three state-of-the-art techniques by Hardekopf-Lin, Heintze-Tardieu and Pearce-Kelly-Hankin. Our experiments show that Deep Propagation has the best average execution time across a suite of 17 well-known benchmarks, the lowest memory requirements in absolute numbers, and the fastest absolute times for benchmarks under 100,000 lines of code. The memory-hungry Wave Propagation has the fastest absolute running times in a memory rich execution environment, matching the speed of the best known points-to analysis algorithms in large benchmarks.},
  booktitle = {Proceedings of the 7th Annual IEEE/ACM International Symposium on Code Generation and Optimization},
  pages     = {126â€“135},
  numpages  = {10},
  keywords  = {Pointer analysis, Cycle detection, Context insensitive, Inclusion based},
  series    = {CGO '09}
}